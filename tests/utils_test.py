# Copyright 2018-2020 Ivan Alles. See also the LICENSE file.

import numpy as np

from localizer import utils


def test_local_max():
    tests = [
        (
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 2, 0, 0, 2, 1, 4, 0],
                [0, 2, 3, 2, 0, 1, 3, 8, 1],
                [0, 1, 9, 6, 1, 0, 1, 1, 0],
                [0, 0, 1, 2, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 2, 1, 0, 0],
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 1, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            {
                'ok': ((3, 3), 3),
                'error': ((3, 3), 10)
            }
        ),
        (
            [
                [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 2, 0, 0],
                [0, 0, 0, 0, 0, 1, 4, 5, 2, 0],
                [0, 0, 0, 0, 0, 2, 9, 9, 3, 1],
                [0, 0, 0, 0, 0, 1, 5, 4, 2, 0],
                [0, 0, 0, 1, 0, 0, 1, 1, 0, 0],
                [0, 0, 4, 3, 2, 0, 0, 0, 0, 0],
                [0, 2, 7, 6, 3, 1, 0, 0, 0, 0],
                [0, 1, 4, 3, 7, 3, 1, 0, 0, 0],
                [0, 0, 1, 2, 2, 1, 0, 0, 0, 0],
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ],
            {
                'ok': ((3, 3), 3),
                'error': ((3, 3), 10)
            }
        ),
        (
            [
                [9, 5, 1, 1, 5, 9],
                [5, 2, 0, 0, 2, 5],
                [1, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0],
                [0, 0, 1, 2, 0, 0],
                [0, 0, 2, 1, 0, 0],
                [0, 0, 1, 2, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 1],
                [5, 2, 0, 0, 2, 5],
                [9, 5, 1, 1, 5, 9],
            ],
            [
                [1, 0, 0, 0, 0, 1],
                [0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 1],
            ],
            {
                'ok': ((3, 3), 3),
                'error': ((3, 3), 2)
            }
        ),
        (
            [
                [0, 1, 3, 0, 0, 0, 0, 0],
                [1, 5, 8, 4, 2, 1, 0, 0],
                [1, 4, 8, 8, 7, 3, 1, 0],
                [0, 1, 2, 3, 7, 2, 1, 0],
                [0, 0, 0, 1, 4, 0, 0, 0],
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 0, 0, 0, 0, 0],
                [0, 0, 1, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
            ],
            {
                'ok': ((3, 3), 3),
                'error': ((3, 3), 10)
            }
        ),
        (
            [
                [0, 0, 0, 1, 0, 0, 0],
                [0, 5, 6, 7, 5, 6, 0],
                [4, 9, 8, 7, 8, 9, 1],
                [0, 8, 5, 8, 3, 4, 0],
                [0, 1, 0, 1, 1, 1, 0],
            ],
            [
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0],
            ],
            {
                'ok': ((5, 5), 3),
                'error': ((3, 3), 3)
            }
        ),
        (  # Multi-channel tensor.
            [
                [
                    [0, 0, 0, 1, 0, 0, 0],
                    [0, 5, 6, 7, 5, 6, 0],
                    [4, 9, 8, 7, 8, 9, 1],
                    [0, 8, 5, 8, 3, 4, 0],
                    [0, 1, 0, 1, 1, 1, 0],
                ],
                [
                    [7, 9, 4, 2, 0, 0, 0],
                    [1, 3, 7, 3, 1, 0, 0],
                    [0, 2, 5, 8, 4, 2, 1],
                    [0, 1, 4, 6, 7, 9, 7],
                    [0, 0, 1, 1, 1, 3, 2],
                ]
            ],
            [
                [
                    [0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0],
                ],
                [
                    [0, 1, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0],
                ]],
            {
                'ok': ((5, 5), 3),
                'error': ((3, 3), 3)
            }
        ),
        (  # Multi-dimensional tensor.
            [
                [
                    [0, 1, 2, 1, 0, 0, 0, 0],
                    [1, 4, 7, 4, 1, 0, 0, 0],
                    [2, 7, 8, 7, 2, 0, 0, 0],
                    [1, 4, 7, 4, 1, 0, 0, 0],
                    [0, 1, 2, 1, 0, 0, 0, 0],
                ],
                [
                    [0, 0, 1, 2, 2, 1, 0, 0],
                    [0, 1, 4, 7, 7, 4, 1, 0],
                    [0, 2, 7, 9, 9, 7, 2, 0],
                    [0, 1, 4, 7, 7, 4, 1, 0],
                    [0, 0, 1, 2, 2, 1, 0, 0],
                ],
                [
                    [0, 0, 0, 0, 1, 2, 1, 0],
                    [0, 0, 0, 1, 4, 7, 4, 1],
                    [0, 0, 0, 2, 7, 8, 7, 2],
                    [0, 0, 0, 1, 4, 7, 4, 1],
                    [0, 0, 0, 0, 1, 2, 1, 0],
                ]
            ],
            [
                [
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 1, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                ],
                [
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0],
                ]
            ],
            {
                'ok': ((3, 3, 3), 3),
                'error': ((3, 3), 3)
            }
        )
    ]

    for i, (data, output, args) in enumerate(tests):
        window_shape, threshold = args['ok']
        result = utils.local_max(np.array(data, dtype=np.float32), window_shape, threshold)
        assert np.array_equal(output, result), \
            'Test sample with index {}: Result is wrong!'.format(i)

        window_shape, threshold = args['error']
        result = utils.local_max(np.array(data, dtype=np.float32), window_shape, threshold)
        assert not np.array_equal(output, result), \
            'Test sample with index {}: Result is ok, but expected to be wrong!'.format(i)
